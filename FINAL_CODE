
# Needed Libraries for Analysis #
library(forecast)
library(fma)
library(tseries)
library(expsmooth)
library(lmtest)
library(zoo)
library(dyn)
library(gdata)
library(dplyr)
library(stringr) 
library(ggplot2)



# Saving File Locations and Uploading SAS File #
setwd("C:/Users/Andy Dotter/Documents/Fall_2018/Fall_1/Time Series_Forecasting/Homework")

well_data<-read.csv("G-2866_T.csv")%>%
    rename(date=Ã¯..date)%>%
    mutate(date = as.character(date))%>%
    select(-Well_ft, -Code)%>%
    group_by(time)%>%
    mutate(new_time=as.character(time),
           hour=str_split(new_time,":")[[1]][1],
           minute=str_split(new_time,":")[[1]][2])%>%
    ungroup(time)%>%
    group_by(date)%>%
    mutate(month=str_split(date,"/")[[1]][1],
           day=str_split(date,"/")[[1]][2],
           year=str_split(date,"/")[[1]][3])%>%
    ungroup(date)%>%
    mutate(minute=as.integer(minute),hour=as.integer(hour),day=as.integer(day),
           month=as.integer(month),year=as.integer(year))%>%
    filter(!(year==2018&month==6&day>8)&
               !(year==2018&month==6&day==8&hour>10)&
               !(year==2018&month==6&day==8&hour==9&minute>30))%>%
    arrange(year,month,day,hour)%>%
    group_by(year,month,day, hour, tz_cd)%>%
    summarise(Corrected_mean=mean(Corrected))%>%
    ungroup(year,month,day,hour)

new_well_data<-well_data%>%
    group_by(year,month)%>%
    summarize(month_mean=mean(Corrected_mean),
              numb=n())%>%
    arrange(year,month)


new_well_data$Date <- as.yearmon(paste(new_well_data$year, new_well_data$month), "%Y %m")

#Create a training and test split, where last 6 months is the test set (all of 2018) 
training <- new_well_data %>% filter(year!=2018)
test <- new_well_data %>% filter(year==2018)

#create a time series object - decomposition 
well_All <- ts(new_well_data$month_mean, start=c(2007,10), frequency = 12)
well_t <- ts(training$month_mean, start = c(2007, 10), frequency = 12)  
well_V <- ts(test$month_mean, start = 2018, frequency = 12 )


# STL decomp with window of 13 b/c seasonality is monthly and need to have odd number
# We did this to check to see if we had seasonality and tred in our data
decomp1 = stl(well_t, s.window = 13)
plot(decomp1)

# We had seasonality to we Checked for stationarity (seasonal differencing)
nsdiffs(well_t)

#One Method to create dummy variables
Trythis <- seasonaldummy(well_t)
xreg1 <- Trythis

# Take out the seasonality by modeling the dummy variables (could do this or linear regression)
not_seasonal <- arima(well_t, xreg=xreg1, order=c(0,0,0))

# This will actually take the difference
#not_seasonal <- arima(well_t, xreg=xreg1, order=c(0,1,0))

# Test for Stationarity
for (i in 0:5){
    {
        adf_results <- adf.test(not_seasonal$residuals, alternative="stationary", k = i)
    }
    print(adf_results)
}


# Model was not stationary so take first differnce First Difference the model
Stationary_Well <- diff(not_seasonal$residuals, difference = 1)


# Check again for Stationarity
for (i in 0:5){
    {
        adf_results <- adf.test(Stationary_Well, alternative="stationary", k = i)
    }
    print(adf_results)
}


# Plot the stationary data.
plot(Stationary_Well, main = "Well Water Level stationary", xlab = "Date", ylab = "Water Level (feet)")
abline(v = 2007.75, col = "red", lty = "dashed")


# Next Steps

# Plot the correlation function
# Review the ACF and PACF to determine if there is AR and MA terms that should be added into the model.
# Use the Arima model to forecast
# Measure the forecast data against the validation dataset
