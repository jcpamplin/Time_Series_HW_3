#------------------------------------#
#        Correlation Functions       #
#------------------------------------#

# Needed Libraries for Analysis #
library(forecast)
library(fma)
library(tseries)
library(expsmooth)
library(lmtest)
library(zoo)
library(dyn)
library(gdata)
library(dplyr)
library(stringr) 
library(ggplot2)



# Saving File Locations and Uploading SAS File #
setwd("C:/Users/Andy Dotter/Documents/Fall_2018/Fall_1/Time Series_Forecasting/Homework")

well_data<-read.csv("G-2866_T.csv")%>%
    rename(date=Ã¯..date)%>%
    mutate(date = as.character(date))%>%
    select(-Well_ft, -Code)%>%
    group_by(time)%>%
    mutate(new_time=as.character(time),
           hour=str_split(new_time,":")[[1]][1],
           minute=str_split(new_time,":")[[1]][2])%>%
    ungroup(time)%>%
    group_by(date)%>%
    mutate(month=str_split(date,"/")[[1]][1],
           day=str_split(date,"/")[[1]][2],
           year=str_split(date,"/")[[1]][3])%>%
    ungroup(date)%>%
    mutate(minute=as.integer(minute),hour=as.integer(hour),day=as.integer(day),
           month=as.integer(month),year=as.integer(year))%>%
    filter(!(year==2018&month==6&day>8)&
               !(year==2018&month==6&day==8&hour>10)&
               !(year==2018&month==6&day==8&hour==9&minute>30))%>%
    arrange(year,month,day,hour)%>%
    group_by(year,month,day, hour, tz_cd)%>%
    summarise(Corrected_mean=mean(Corrected))%>%
    ungroup(year,month,day,hour)

new_well_data<-well_data%>%
    group_by(year,month)%>%
    summarize(month_mean=mean(Corrected_mean),
              numb=n())%>%
    arrange(year,month)

new_well_data$Date <- as.yearmon(paste(new_well_data$year, new_well_data$month), "%Y %m")
#Create a training and test split, where last 6 months is the test set (all of 2018) 

training <- new_well_data %>% filter(year!=2018)
test <- new_well_data %>% filter(year==2018)

#create a time series object - decomposition 
well_All <- ts(new_well_data$month_mean, start=c(2007,10), frequency = 12)
well_t <- ts(training$month_mean, start = c(2007, 10), frequency = 12)  
well_V <- ts(test$month_mean, start = 2018, frequency = 12 )

well_t2 <- as.data.frame(well_t)

library(haven)
write_sas(well_t2, "well_t.sas7bdat")

write.csv(new_well_data, file = "well_t.csv")

#One Method to create dummy variables
#fit.try <- tslm(well_t ~ trend + seasonal)
Trythis <- seasonaldummy(well_t)
Trythis

#Another Method to create dummy variables
Jan <- ts(rep(c(1,0,0,0,0,0,0,0,0,0,0,0),11), start=c(2007,10), frequency=12)
Feb <- ts(rep(c(0,1,0,0,0,0,0,0,0,0,0,0),11), start=c(2007,10), frequency=12)
Mar <- ts(rep(c(0,0,1,0,0,0,0,0,0,0,0,0),11), start=c(2007,10), frequency=12)
Apr <- ts(rep(c(0,0,0,1,0,0,0,0,0,0,0,0),11), start=c(2007,10), frequency=12)
May <- ts(rep(c(0,0,0,0,1,0,0,0,0,0,0,0),11), start=c(2007,10), frequency=12)
Jun <- ts(rep(c(0,0,0,0,0,1,0,0,0,0,0,0),11), start=c(2007,10), frequency=12)
Jul <- ts(rep(c(0,0,0,0,0,0,1,0,0,0,0,0),11), start=c(2007,10), frequency=12)
Aug <- ts(rep(c(0,0,0,0,0,0,0,1,0,0,0,0),11), start=c(2007,10), frequency=12)
Sep <- ts(rep(c(0,0,0,0,0,0,0,0,1,0,0,0),11), start=c(2007,10), frequency=12)
Oct <- ts(rep(c(0,0,0,0,0,0,0,0,0,1,0,0),11), start=c(2007,10), frequency=12)
Nov <- ts(rep(c(0,0,0,0,0,0,0,0,0,0,1,0),11), start=c(2007,10), frequency=12)

    
xreg <- cbind(Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov)

fit_y <- lm(well_t ~Trythis)
plot(fit_y)


# Remove the seasonality and Trend in the Model
#decomp = stl(well_All, s.window='periodic')
# STL decomp with window of 13 b/c seasonality is monthly and need to have odd number. 
decomp1 = stl(well_t, s.window = 13)
# Since STL cannot model multiplicative seasonality, we used classical decomp to get seasonal factor
decomp2 = decompose(well_t,"multiplicative")
de_seasonal_Well <- seasadj(decomp1)
de_seasonal_well2 <- seasadj(decomp2)
de_seasonal_well3 <- well_t/ decomp2$seasonal
#plot(decomp)
plot(decomp1)
plot(decomp2)
plot(de_seasonal_well2)
plot(decompose(de_seasonal_well2,"multiplicative"))
plot(de_seasonal_well3)
plot(well_t, col = "grey", main = "Well_Data", xlab = "", ylab = "Feed Depth", lwd = 2)
lines(decomp1$time.series[,2], col = "red", lwd = 2)



# Correlation Functions #
Acf(well_t, lag = 24)$acf
Pacf(well_t, lag = 24)$acf

Acf(de_seasonal_well3, lag = 10)$acf
Pacf(de_seasonal_well3, lag = 10)$acf


# Adjusted Dickey Fuller Test#
adf.test(de_seasonal_well3, alternative="stationary")# , k=1)


for (i in 0:12){
    {
    adf_results <- adf.test(de_seasonal_well3, alternative="stationary", k = i)
    }
print(adf_results)
}
#Difference the data based on dickey fuller test
# This said it was not stationary at 0 lag in DF which is lag 1.
Stationary_Well <- diff(de_seasonal_well3, difference = 5)

# Plot of stationary data.
plot(Stationary_Well, main = "Well Water Level stationary", xlab = "Date", ylab = "Water Level (feet)")
abline(v = 2007.75, col = "red", lty = "dashed")


#######              ############
# Correlation Functions #
Acf(Stationary_Well, lag = 10)$acf
Pacf(Stationary_Well, lag = 10)$acf


# Re-do dickey fuller to ensure stationarity
adf.test(Stationary_Well, alternative="stationary", K=1)

# Arima Model
auto.arima(Stationary_Well, seasonal=FALSE)
# Arima fit on original time Series
auto.arima(well_t, seasonal=TRUE)
#arima(de_seasonal_Well_1, order=c(1,1,12))

# Evaluate fit of ARIMA Model
fit <- auto.arima(Stationary_Well,seasonal = FALSE)
tsdisplay(residuals(fit), lag.max=45, main = '(0,0,0) Model Residuals')




#View(well_All)

# Augmented Dickey-Fuller Testing #
adf.test(well_All, alternative = "stationary", k = 2)


ADF.Pvalues <- rep(NA, 3)
for(i in 0:2){
    ADF.Pvalues[i+1] <- adf.test(well_All, alternative = "stationary", k = i)$p.value
}

# Automated Differencing Test Function #
ndiffs(well_t)

# Automated Seasonal Differencing Test Function #
nsdiffs(well_t)
ndiffs(diff(well_All, lag = 12))


# Lag Plot of Y #
lag.plot(well_All, lag = 2, main = "Scatterplots of Y with First 2 Lags", diag = FALSE, layout = c(1, 2))

# Augmented Dickey fuller Test
adf.test(well_All, nlag = 2, output = TRUE)


# Correlation Functions #
Acf(well_All, lag = 10)$acf
Pacf(well_All, lag = 10)$acf

Acf(well_All, lag = 40, main = "Autocorrelation Plot for Well Data")$acf
Pacf(well_All, lag = 40, main = "Partial Autocorrelation Plot for Well Data")$acf


# Difference the Model
well_all_2 <- diff()



# Ljung-Box Test for Steel ES Model #
View(well_All[,3])

SES.well_All <- ses(well_All[,3], initial = "optimal", h = 24)
White.LB <- rep(NA, 10)
for(i in 1:10){
    White.LB[i] <- Box.test(SES.well_All$residuals, lag = i, type = "Lj", fitdf = 1)$p.value
}

White.LB <- pmin(White.LB, 0.2)
barplot(White.LB, main = "Ljung-Box Test P-values", ylab = "Probabilities", xlab = "Lags", ylim = c(0, 0.2))
abline(h = 0.01, lty = "dashed", col = "black")
abline(h = 0.05, lty = "dashed", col = "black")
